{"version":3,"sources":["Pages/Verify.js","Pages/AccessGranted.js","Pages/AccessDenied.js","App.js","serviceWorker.js","index.js"],"names":["Verify","history","handleScan","qrData","a","console","log","Axios","post","data","status","push","className","delay","onError","err","onScan","showViewFinder","href","size","AccessGranted","style","display","justifyContent","alignItems","height","width","backgroundColor","flexDirection","fontSize","AccessDenied","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6TA0DeA,G,MAlDA,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACVC,EAAU,uCAAG,WAAOC,GAAP,eAAAC,EAAA,yDACjBC,QAAQC,IAAI,qBACRH,EAFa,gCAGMI,IAAMC,KAAK,UAAW,CAAEC,KAAMN,IAHpC,gBAIK,YAJL,EAGTM,KACGC,OACPT,EAAQU,KAAK,kBAEbV,EAAQU,KAAK,iBAPA,2CAAH,sDAgBhB,OACE,yBAAKC,UAAU,mBACb,yBAAKA,UAAU,WAAf,sDACA,kBAAC,IAAD,CACEC,MAAO,IACPC,QATc,SAACC,GACnBV,QAAQC,IAAIS,IASRC,OAAQd,EACRe,gBAAgB,EAChBL,UAAU,OAEZ,yBAAKA,UAAU,SACb,yBAAKA,UAAU,iBACb,uBAAGM,KAAK,oDACN,kBAAC,IAAD,CAAcC,KAAK,UAErB,uBAAGD,KAAK,oDACN,yCAIJ,yBAAKN,UAAU,iBACb,uBAAGM,KAAK,0DACN,kBAAC,IAAD,CAAYC,KAAK,UAEnB,uBAAGD,KAAK,0DACN,4C,QC5BGE,EAnBO,WACpB,OACE,yBACEC,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,OAAQ,QACRC,MAAO,QACPC,gBAAiB,WACjBC,cAAe,WAGjB,kBAAC,IAAD,CAAeP,MAAO,CAAEQ,SAAU,UAClC,yBAAKR,MAAO,CAAEQ,SAAU,QAAxB,oBCKSC,EAnBM,WACnB,OACE,yBACET,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,OAAQ,QACRC,MAAO,QACPC,gBAAiB,WACjBC,cAAe,WAGjB,kBAAC,IAAD,CAAeP,MAAO,CAAEQ,SAAU,UAClC,yBAAKR,MAAO,CAAEQ,SAAU,QAAxB,mBCGSE,MAdf,WACE,OACE,yBAAKnB,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoB,OAAK,EAACC,KAAK,IAAIC,UAAWlC,IACjC,kBAAC,IAAD,CAAOgC,OAAK,EAACC,KAAK,iBAAiBC,UAAWd,IAC9C,kBAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,gBAAgBC,UAAWJ,QCDnCK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.6313b209.chunk.js","sourcesContent":["import React from \"react\";\nimport Axios from \"axios\";\nimport QrReader from \"react-qr-reader\";\nimport { AiFillGithub } from \"react-icons/ai\";\nimport { IoIosPaper } from \"react-icons/io\";\nimport \"./Styles.css\";\nimport { Link } from \"react-router-dom\";\n\nconst Verify = ({ history }) => {\n  const handleScan = async (qrData) => {\n    console.log(\"QR code detected\");\n    if (qrData) {\n      let { data } = await Axios.post(\"/verify\", { data: qrData });\n      if (data.status === \"success\") {\n        history.push(\"/accessGranted\");\n      } else {\n        history.push(\"/accessDenied\");\n      }\n    }\n  };\n\n  const handleError = (err) => {\n    console.log(err);\n  };\n\n  return (\n    <div className=\"verifyContainer\">\n      <div className=\"heading\">TOTP based Authentication for Gateway Entry System</div>\n      <QrReader\n        delay={1000}\n        onError={handleError}\n        onScan={handleScan}\n        showViewFinder={false}\n        className=\"qr\"\n      />\n      <div className=\"links\">\n        <div className=\"linksChildren\">\n          <a href=\"https://github.com/pradyumnamahajan/gatewayPaper\">\n            <AiFillGithub size=\"2rem\" />\n          </a>\n          <a href=\"https://github.com/pradyumnamahajan/gatewayPaper\">\n            <div>Github</div>\n          </a>\n        </div>\n\n        <div className=\"linksChildren\">\n          <a href=\"http://ijecs.in/index.php/ijecs/article/view/4481/3953\">\n            <IoIosPaper size=\"2rem\" />\n          </a>\n          <a href=\"http://ijecs.in/index.php/ijecs/article/view/4481/3953\">\n            <div>Paper</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Verify;\n","import React from \"react\";\nimport { FaCheckCircle } from \"react-icons/fa\";\n\nconst AccessGranted = () => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"100vh\",\n        width: \"100vw\",\n        backgroundColor: \" #00FF00\",\n        flexDirection: \"column\",\n      }}\n    >\n      <FaCheckCircle style={{ fontSize: \"50vh\" }} />\n      <div style={{ fontSize: \"8vh\" }}>Access Granted</div>\n    </div>\n  );\n};\n\nexport default AccessGranted;\n","import React from \"react\";\nimport { FaTimesCircle } from \"react-icons/fa\";\n\nconst AccessDenied = () => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"100vh\",\n        width: \"100vw\",\n        backgroundColor: \" #FF0000\",\n        flexDirection: \"column\",\n      }}\n    >\n      <FaTimesCircle style={{ fontSize: \"50vh\" }} />\n      <div style={{ fontSize: \"8vh\" }}>Access Denied</div>\n    </div>\n  );\n};\n\nexport default AccessDenied;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Verify from \"./Pages/Verify\";\nimport AccessGranted from \"./Pages/AccessGranted\";\nimport AccessDenied from \"./Pages/AccessDenied\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Verify} />\n          <Route exact path=\"/accessGranted\" component={AccessGranted} />\n          <Route exact path=\"/accessDenied\" component={AccessDenied} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}